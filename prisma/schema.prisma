generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  nickname     String        @unique
  isAdmin      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  validationId String?       @default(uuid())
  isValidated  Boolean?      @default(false)
  expenses     Expense[]
  revenues     Revenue[]
  tithers      Tithers[]
  Category     Category[]
  SubCategory  SubCategory[]

  @@map("user")
}

model Expense {
  id          String       @id @default(uuid())
  description String
  value       Float
  dueDate     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  Category    Category?    @relation(fields: [category], references: [name])
  category    String?
  SubCategory SubCategory? @relation(fields: [subCategory], references: [name])
  subCategory String?

  @@map("expense")
}

model Revenue {
  id          String       @id @default(uuid())
  description String
  value       Float
  dueDate     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  Category    Category?    @relation(fields: [category], references: [name])
  category    String?
  SubCategory SubCategory? @relation(fields: [subCategory], references: [name])
  subCategory String?

  @@map("revenue")
}

model Tithers {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("tithers")
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  type        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  SubCategory SubCategory[]
  Revenue     Revenue[]
  Expense     Expense[]

  @@map("category")
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  type       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Revenue    Revenue[]
  Expense    Expense[]

  @@map("subCategory")
}
